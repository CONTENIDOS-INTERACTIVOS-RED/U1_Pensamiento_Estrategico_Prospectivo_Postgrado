{"remainingRequest":"/home/runner/work/U1_Pensamiento_Estrategico_Prospectivo_Postgrado/U1_Pensamiento_Estrategico_Prospectivo_Postgrado/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Pensamiento_Estrategico_Prospectivo_Postgrado/U1_Pensamiento_Estrategico_Prospectivo_Postgrado/src/views/curso/Tema2.vue?vue&type=template&id=01354cdb&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Pensamiento_Estrategico_Prospectivo_Postgrado/U1_Pensamiento_Estrategico_Prospectivo_Postgrado/src/views/curso/Tema2.vue","mtime":1733717177168},{"path":"/home/runner/work/U1_Pensamiento_Estrategico_Prospectivo_Postgrado/U1_Pensamiento_Estrategico_Prospectivo_Postgrado/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Pensamiento_Estrategico_Prospectivo_Postgrado/U1_Pensamiento_Estrategico_Prospectivo_Postgrado/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Pensamiento_Estrategico_Prospectivo_Postgrado/U1_Pensamiento_Estrategico_Prospectivo_Postgrado/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Pensamiento_Estrategico_Prospectivo_Postgrado/U1_Pensamiento_Estrategico_Prospectivo_Postgrado/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Pensamiento_Estrategico_Prospectivo_Postgrado/U1_Pensamiento_Estrategico_Prospectivo_Postgrado/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}